# You are given a 0-indexed integer array nums.
# Return the maximum value over all triplets of indices (i, j, k)
#  such that i < j < k. If all such triplets have a negative value, return 0.
# The value of a triplet of indices (i, j, k)
#  is equal to (nums[i] - nums[j]) * nums[k].
# ---------------------
# 3 <= nums.length <= 10 ** 5
# 1 <= nums[i] <= 10 ** 6


def maximum_triplet_value(nums: list[int]) -> int:
    # working_sol: (37.54%, 26.28%) -> (219ms, 30.29mb)  time: O(n) | space: O(n)
    # Maximum value we can be obtained by this values:
    #  minimum value on `nums[j]` and maximised values: `nums[i]`, `nums[k]`.
    # `nums[i]` should be on the left side, `nums[k]` on the right side.
    # So, we can use `nums[j]` as an anchor + take maximum values on both sides.
    # Which is just max_prefix and max_suffix.
    prefixes: list[int] = []
    prefix: int = 0
    for index in range(len(nums)):
        prefixes.append(prefix)
        prefix = max(prefix, nums[index])
    suffixes: list[int] = [0 for _ in nums]
    suffix: int = 0
    for index in range(len(nums) - 1, -1, -1):
        suffixes[index] = suffix
        suffix = max(suffix, nums[index])
    out: int = 0
    for index in range(1, len(nums) - 1):
        out = max(
            out,
            (prefixes[index] - nums[index]) * suffixes[index]
        )

    return out


# Time complexity: O(n) <- n - length of the input array `nums`.
# Always traversing whole input array, twice => O(2 * n).
# And (n - 2) indexes, once => O(2 * n + (n - 2)).
# ---------------------
# Auxiliary space: O(n)
# `prefixes` <- allocates space for each value in `nums` => O(n).
# `suffixes` <- allocates space for each value in `nums` => O(2 * n).


test: list[int] = [12, 6, 1, 2, 7]
test_out: int = 77
assert test_out == maximum_triplet_value(test)

test = [1, 10, 3, 4, 19]
test_out = 133
assert test_out == maximum_triplet_value(test)

test = [1, 2, 3]
test_out = 0
assert test_out == maximum_triplet_value(test)
