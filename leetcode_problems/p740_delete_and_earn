# You are given an integer array nums.
# You want to maximize the number of points you get by performing
#  the following operation any number of times:
#  - Pick any nums[i] and delete it to earn nums[i] points.
#  Afterwards, you must delete every element equal to nums[i] - 1
#   and every element equal to nums[i] + 1.
# Return the maximum number of points you can earn by applying the
#  above operation some number of times.
# --------------------------
# 1 <= nums.length <= 2 * 10 ** 4
# 1 <= nums[i] <= 10 ** 4
from collections import Counter


def delete_and_earn(nums: list[int]) -> int:
    # working_sol (85.24%, 77.33%) -> (6ms, 19.44mb)  time: O(n * log n) | space: O(n)
    if not nums:
        return 0

    count = Counter(nums)
    unique = sorted(count)

    prev = None
    take = 0  # max points if we take current number
    skip = 0  # max points if we skip current number

    for num in unique:
        points = num * count[num]

        if prev == num - 1:
            # We can't take both prev and current
            take, skip = skip + points, max(skip, take)
        else:
            # No conflict, can safely add to max of previous
            take, skip = max(skip, take) + points, max(skip, take)

        prev = num

    return max(take, skip)


# Time complexity: O(n * log n) <- n - length of the input array `nums`.
# Always sorting the input array `nums`, once => O(n * log * n).
# Counting all the values of the `nums`, once => O(n * log * n + n)
# Extra traversing the whole sorted array, once => O(n * log * n + n + n).
# --------------------------
# Auxiliary space: O(n)
# `sorted` <- takes O(n) by itself => O(n).
# `count` <- takes O(n) in the worst case, when all values are unique => O(2 * n).


test: list[int] = [3, 4, 2]
test_out: int = 6
assert test_out == delete_and_earn(test)

test = [2, 2, 3, 3, 3, 4]
test_out = 9
assert test_out == delete_and_earn(test)
